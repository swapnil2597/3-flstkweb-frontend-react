import anObject from"/node_modules/core-js/internals/an-object.js";import isArrayIteratorMethod from"/node_modules/core-js/internals/is-array-iterator-method.js";import toLength from"/node_modules/core-js/internals/to-length.js";import bind from"/node_modules/core-js/internals/function-bind-context.js";import getIteratorMethod from"/node_modules/core-js/internals/get-iterator-method.js";import callWithSafeIterationClosing from"/node_modules/core-js/internals/call-with-safe-iteration-closing.js";const _ref={exports:{}};(function(module,exports){var Result=function Result(stopped,result){this.stopped=stopped,this.result=result},iterate=module.exports=function(iterable,fn,that,AS_ENTRIES,IS_ITERATOR){var iterator,iterFn,index,length,result,next,step,boundFunction=bind(fn,that,AS_ENTRIES?2:1);if(IS_ITERATOR)iterator=iterable;else{if(iterFn=getIteratorMethod(iterable),"function"!=typeof iterFn)throw TypeError("Target is not iterable");if(isArrayIteratorMethod(iterFn)){for(index=0,length=toLength(iterable.length);length>index;index++)if(result=AS_ENTRIES?boundFunction(anObject(step=iterable[index])[0],step[1]):boundFunction(iterable[index]),result&&result instanceof Result)return result;return new Result(!1)}iterator=iterFn.call(iterable)}for(next=iterator.next;!(step=next.call(iterator)).done;)if(result=callWithSafeIterationClosing(iterator,boundFunction,step.value,AS_ENTRIES),"object"==typeof result&&result&&result instanceof Result)return result;return new Result(!1)};iterate.stop=function(result){return new Result(!0,result)}})(_ref,_ref.exports);export default _ref.exports;